"""
一、什么是设计模式？
设计模式（Design Patterns） 是一种在软件开发中常见问题的解决方案。
这些解决方案是久经考验的，被证明为在特定的情况下有效，因此可以作为解决类似问题的模板。
设计模式不仅仅是关于代码的设计，它更多地是关注于代码之间的交互和通信。

二、设计模式通常包含以下几个部分：
    名称：给设计模式起一个简洁的名字，用以描述其主要特点和用途。
    问题：描述在何种情况下应使用此设计模式。
    解决方案：包含设计模式的构成部分，以及它们之间的协作关系。
    效果：描述使用设计模式带来的好处和可能存在的问题。

三、设计模式通常分为以下几类：
    创建型模式：涉及对象的实例化，如: 工厂方法模式、单例模式。
    结构型模式：关注类和对象的组合，如: 组合模式、装饰器模式、外观模式、代理模式。
    行为型模式：关注对象之间的通信，如: 观察者模式、模板方法模式、迭代器模式、命令模式。

四、注意事项？
    使用设计模式可以使代码更加清晰、可维护和可扩展，同时也有助于开发人员之间的沟通和协作。
但是，过度使用或在不必要的情况下使用设计模式也可能导致代码变得复杂和难以理解。
因此，在使用设计模式时，需要根据实际情况进行权衡和选择。

五、总结：
    1、设计模式本质是一种解决问题的方案或模版。
    2、面向对象是一种设计模式，本质是一种写代码的方式，或者解决问题的方案。
"""


"""
单例模式： 一个类只能实现一个实例对象。
  应用 ： 为了节省资源，当一个项目里面只需要一个工具类实例的使用，可以用单例模式。
"""
# 某些情况下，我们希望一个类只能创建一个对象，我从任何地方去通过这个类创建对象，都是同一个。

class A():
    pass

# 单例模式的实现(简单方式)
a =  A()
# 规定之后所有的属于这个A类的对象创建，都是通过 变量 a 得到
a1 = a
a2 = a
print(a1)
print(a2)



# 单例模式的实现(复杂方式) --- 同new实现
class Gong_ju():
    __x = None    # 创建一个私有变量，用于存储唯一的对象,在最开始创建的时候是空的
    def __new__(cls, *args, **kwargs):
        if cls.__x == None:
            cls.__x = object.__new__(cls)         #当私有变量是空的情况下，通过使用object中的new创建一个对象，保存
            return  cls.__x     # 返回类中对象
        else:
            return  cls.__x     # 返回类中的对象

# 测试
g1 = Gong_ju()
print(g1)

g2 = Gong_ju()
print(g2)

g3 = Gong_ju()
print(g3)

g4 = Gong_ju()
print(g4)


