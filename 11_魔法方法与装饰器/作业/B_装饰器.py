
"""
装饰器
装饰器其实也是一个闭包，其功能就是在不改动目标函数的同时，增加额外的功能。

闭包(是函数特殊的书写状态):
     1、两个函数嵌套
     2、外层函数返回内层函数名（函数引用）
"""

# 闭包优势：
# 1、能够保护数据不被随意修改
# 2、闭包这样的写法可以延长 局部变量数据 的使用寿命
# 3、闭包可以用作装饰器
def fucn1():
    def func2():      # 保存账户信息，并返回
        # 保存了账号信息
        userName = "buyu"
        userPass = 1024
        return userName,userPass
    return func2


"""
禁言功能 1.0版本已经上线了,现在客户觉得不满意，它觉得这个禁言功能太简陋了，希望能够有一些提示。
新需求： 
    升级 2.0版本，在禁言之前进行提示"开始禁言！"，并进行禁言倒计时，禁言结束后，提示"禁言结束~"。
思考：
    由于 禁言1.0版本函数 在上线的项目里面被使用了,所以目前我们遇到了一个难题。
    怎么样在尽可能少的改变 已经上线的项目原始代码的情况下，实现客户的需求？
"""
# 模拟游戏禁言的函数 禁言1.0版本
def banned_to_post():
    print("正在禁言中")



# 写装饰器步骤：
# 1、确定要升级的函数
# 2、写一个闭包,在外层函数中，要有一个形参，用于接收要升级的函数 ,而内层函数，用于实现具体的功能升级代码
# 3、在需要升级的函数前面，加上 @装饰器名字




