# 散列类型？  ----- 没有顺序的一列数据数据这样的类型
"""
什么是字典？
    概念：以键值对的方式存储数据的无序*可变*散列数据
    专有名词： dict
"""

# 一、字典的创建：  { 键:值, 键:值, ....}   键类似于索引是对于值的特殊标识
# 如何创建一个空字典
d1 = {}    # 空字典
print(type(d1))

# 由于集合用到的比字典少很多，所以{}是表示空字典的，空集合需要用set()创建
s = set()    # 空集合
print(type(s))

# 如果创建一个有几个值的字典
# 需求：这个字典中需要存储用户姓名，用户密码
# 字典中的值以键值对存在【 键 : 值 】，每个键值对直接用逗号分隔
d2 = {
    "用户姓名":"不渝",
    "用户密码":18
     }

# 字典在哪里用到？ --- 非常广泛，比如需要写一个爬虫程序爬取数据的时候，就得看得懂字典
# 字典中的键,可以是什么类型数据？  --- 一般都是字符串类型，别的类型很少用
# 如何理解键和值的关系？ --- 键有点类似于变量和值。也有点类似于索引和值。专业的说法是，键是值的唯一标识。他们是一对一关系。

# 二、字典的特点： 键唯一，值不唯一【理解：索引是唯一的，但是索引对应的值是可以重复的】
# 键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一。
d3 = {
    "姓名" : "林里",
    "年龄" : 18 ,
    "年龄" : 38 ,
    "姓名" : "不渝"
}    # 当键重复的时候是不报错的，但是后面的键对应的值会覆盖掉前面的
print(d3)

# 三、字典的操作方法

""" 新增：
语法： .setdefault(键,值)  无则增,有则查
注意：.setdefault(键,值) 确实是用于新增新键值对的，但是如果新增的键在之前的字典中存在，那么这个方法就会变成查询方法，会根据键查询
"""
ins_dict = {"姓名":"不渝","年龄":18}
# 练习：往这个字典中,增加 一个新的 城市 键值对
ins_dict.setdefault("城市","长沙")    # 在使用该方法的时候，键和值直接用逗号分隔
# 字典是可变数据类型，所以对于字典的操作都是作用于源数据的
print(ins_dict)     # {'姓名': '不渝', '年龄': 18, '城市': '长沙'}

# 新增方法的特殊之处，隐藏技能
# 当新增的键在字典中已经存在的时候，会触发隐藏技能
c = ins_dict.setdefault("城市","广州")
print(ins_dict)     # 没有变化？？？？ 因为这里触发了隐藏技能，新增方法变成了查询方法
print(c)


print("--------------------------------------------------------------------------")
"""  删除：
1、清空字典
    语法： .clear()
2、根据指定的键删除对应的键值对数据
    语法： .pop(键)
3、删除最后一个键值对
    .popitem()  删除最后一个键值对，用的较少
"""
del_dict1 = {"姓名":"不渝","年龄":18}
# 练习1: 要求清空这个字典
del_dict1.clear()
print(del_dict1)

del_dict2 = {"姓名":"不渝","年龄":18}
# 练习2: 要求删除 "年龄":18 键值对
del_dict2.pop("年龄")
print(del_dict2)

del_dict3 = {"姓名":"不渝","年龄":18,"城市":"长沙"}
# 练习3: 要求删除 "城市":"长沙" 键值对，即最后这个键值对
del_dict3.popitem()
print(del_dict3)





""" 修改：
根据新字典去修改旧字典
    语法：旧字典.update(新字典)   
    新字典的 键 若在旧字典中，则修改对应 值; 新字典的 键 若不在旧字典中，则新增键值对。
"""
upd_dict1 = {"姓名":"不渝","年龄":18,"爱好":"干饭"}      # 旧字典
upd_dict2 = {"姓名":"林里","年龄":8,"城市":"广州"}       #新字典
# 练习: 请依据新字典去修改旧字典
upd_dict1.update(upd_dict2)   # 更新，根据新的数据更新旧数据
print(upd_dict1)

# 字典是无序的，这个无序与集合不同，集合的无序体现在没有下标存值的时候也没有顺序，字典的无序仅仅体现在没有下标




""" *****查询：
1、查指定key值
    语法1：.get(键)   获取指定key对应的 值 ; 若不存在则返回None
    语法2：字典名[键]   获取指定key对应的 值 ; 若不存在则报错KeyError
    
2、查所有的key
    语法： .keys()  查询字典中所有的key,返回类似列表的key对象
    
3、查所有的值
    语法： .values()  查询字典中所有的值 ,返回类似列表的 值对象

4、查键值对
    语法： .items()   查询出所有的键值对,返回一个看起来像列表的 元组列表对象
"""
sel_dict = {
    "姓名":"林里",
    "年龄":18,
    "城市":"广州"
}
# 一、查指定key值
# 语法1：.get(键)   获取指定key对应的 值 ; 若不存在则返回None
x = sel_dict.get("爱好")
print(x)
# 语法2：字典名[键]   获取指定key对应的 值 ; 若不存在则报错KeyError
y = sel_dict["城市"]
print(y)

# 二、查所有的key
# 语法： .keys()  查询字典中所有的key,返回类似列表的key对象
k = sel_dict.keys()    # 查到字典中所有的键之后，会返回一个 列表对象，这个列表对象可以直接转成列表
print(k)

# 三、查所有值
# 语法： .values()  查询字典中所有的值 ,返回类似列表的 值对象
v = sel_dict.values()   # 查到所有值后，返回的是值列表对象，列表对象指的是特殊表示的列表，可以直接当列表用
print(v)

# 四、查键值对
#    语法： .items()   查询出所有的键值对,返回一个看起来像列表的 元组列表对象
i = sel_dict.items()  # 查到字典中所有键值对会返回一个列表对象，每个键值对会存在一个元组中，所有的键值对元组存在这个列表对象中
print(i)


# 课后作业1： 将字典的所有代码敲一遍（为了方便，可以直接用我发的哪个只有注释的文件敲代码）。
# 课后作业2： 完成抄写作业，并且将每个抄写好的数据用print去进行打印

