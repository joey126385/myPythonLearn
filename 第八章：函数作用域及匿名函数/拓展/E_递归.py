"""
函数递归

概念： 当函数代码中有调用自己的代码，这种情况叫做递归
重点： 递归一定要有程序出口（一定要有一个程序会停下来的因素）

递归游戏里面用的比较多，这个比较复杂，大家第一次接触，这个属于重在理解的一个概念！！！
递归只会在面试的时候考，一般在公司里面不咋用，因为用这个方式写代码会让代码的负荷很大，比较危险，所以很多公司会特别慎重的用这个概念。

"""
# 题目：从控制台输入一个数字，计算这个数字的阶乘
# 1、理解题目：
# 阶乘： 从1开始乘到自己本身
# 假设有3阶，它的阶乘： 1*2*3=6
# 假设有4阶，它的阶乘： 1*2*3*4=24

# 2、写代码
#  n 是阶数   func999 是计算阶乘的函数
def func999(n):
    if n == 0:
        return 1     #程序出口，最后一次递归 返回1
    else:
        return n * func999(n-1)

# 调用阶乘函数
x = func999(4)
print(x)




"""
debug 错误调试
1、打断点 2、右键debug 3、点击调试台的小箭头（向下的）

# 阶乘函数调用解析：
n=4 => func999(n) 
=> func999(4) => n*func999(n-1) =>4*func999(4-1) =>4*func999(3) => 4*6=24
# 第一次递归
n=3 => 
func999(3) => 3*func999(3-1) => 3*func999(2) => 3*2 = 6
# 第二次递归
n=2 =>
func999(2) => 2*func999(2-1) => 2*func999(1) => 2*1 =2
# 第三次递归
n=1 =>
func999(1) => 1* func999(1-1) => 1*func999(0) => 1*1 =1 
# 第四次递归
n=0 => func999(0) => 1

# 总结：
func999(0) = 1 
func999(1) = 1*1 =1
func999(2) = 2*1 =2
func999(3) = 3*2 =6
func999(4) = 4*6 =24
"""

