"""
回调函数:
回调函数概念：将函数作为参数传递(这里传递的是函数的引用)

匿名函数通常当做回调函数取使用，简单的说就是，某些情况下，我们在去进行传参的时候，这个参数可以是一个函数。

"""
# 回调函数概念：将函数作为参数传递
# 举例
# 定义一个函数x,这个函数的功能是作为一个中间函数，执行传进来的函数
def x(f):
    print(f)     # <function func at 0x0000019749A5B310> 打印的是函数的内存地址

# 定义一个作为参数的函数
def func():
    print("这个是一个及其简单的函数")

# 要求：调用函数x , 这里传参一个函数名，像这样传参，这个被当做参数传递的函数，我们称之为回调函数




# 注意：函数名 和 函数名() 是有区别的，函数名是可以代表一个函数，
#      这个代表我们称呼为引用，函数名()是对这个函数去进行使用

def y(f):
    print(f)
y("不渝")    # 这个是普通参数


"""
回调机制的优势
回调机制提供了非常大的灵活性。在回调中，我们利用某种方式，把回调函数像参数一样传入中间函数。
程序可以在运行时，通过登记不同的回调函数，来决定、改变中间函数的行为。这就比简单的函数调用要灵活太多了。

回调机制机制在许多场景中都非常有用，并带来了以下优势：
1、异步处理：
回调机制非常适合处理异步事件，如网络请求、文件读写或用户输入等。
在这些情况下，程序不需要持续等待某个操作完成，而是可以继续执行其他任务，并在操作完成时通过回调来通知程序。
2、代码解耦：
通过回调，可以将功能划分为更小的、独立的单元。
每个单元可以专注于完成特定的任务，并在需要时通过回调与其他单元通信。这有助于减少代码之间的依赖和耦合，提高代码的可读性和可维护性。
3、灵活性：
回调函数可以作为参数传递给其他函数，这使得在运行时动态改变行为成为可能。
例如，可以根据不同的条件或输入传递不同的回调函数，以实现不同的功能。
"""
