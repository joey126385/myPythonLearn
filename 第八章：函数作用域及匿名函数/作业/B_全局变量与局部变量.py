
"""
一、Python中变量划分？
概念：定义在函数外面的变量叫做全局变量，作用全局（整个当前py文件）；定义在函数里面的变量，叫做局部变量，作用在定义的函数里面。

二、局部变量和全局变量区别
1、作用域：全局变量在整个程序中都可见，而局部变量仅在其函数或代码块内可见。
2、生命周期：全局变量的生命周期从程序开始运行时开始，直到程序结束。
           而局部变量的生命周期仅在其被声明的函数或代码块执行期间存在。
3、内存位置：尽管全局变量和局部变量有相同的名称，但它们实际上存储在不同的内存位置。
           每次函数被调用时，其局部变量都会在内存中重新创建，而全局变量在程序的整个生命周期中保持不变。

注意：在Python中，局部变量和全局变量可以具有相同的名称，但这并不会引起冲突，因为它们分别属于不同的作用域。
     当然，在一个区域内，变量名是不能重复的。
"""


"""
# 练习1： 变量 具有作用域,请思考以下代码中的变量分别是什么作用域变量呢？
x = 10        # 这是一个 全局 变量
def func1():
    x = 30    # 这是一个 局部 变量
    b = 20    # 这是一个 局部 变量
func1()
print(x)      # 打印的结果是什么呢 10
# 因为及时局部变量和全局变量的变量名一样，但是在程序的底层他们还是不同，所以这个x的值不会被覆盖
"""


"""
练习2：如果我们希望能够在函数中去实现对全局变量进行改变该如何？
global 声明改动全局变量(相当于跟python打了个招呼，我这个是不一般的情况)
"""

"""
x = 10        # 这是一个 全局 变量
def func1():
    global x  # 申明改动 全局变量
    x = 30    # 这是一个 局部 变量
    b = 20    # 这是一个 局部 变量
func1()
print(x)      # 打印的结果是什么呢 30
# 因为及时局部变量和全局变量的变量名一样，但是在程序的底层他们还是不同，所以这个x的值不会被覆盖
"""


# 函数嵌套【用地球和海洋为案例理解】
# 练习3：假设我就是想改变函数嵌套中，外层函数 局部的 数据y怎么办？
# 全局【太空】
def func1():         # 第一层局部【地球】
    y = 10           # 局部变量【地球中的生物-人类 可以在地球的任意位置生存】
    def func2():     # 第二层局部【海洋】
        y = 60       # 局部的局部变量【地球上的海洋中的生物-鱼】
        print(f"func2 中查看 y 的值是：{y}")    # y 的值是60
    func2()  # 调用内层函数
    print(f"func1 中查看 y 的值是：{y}")    # y 的值是10
func1()


print("-----------------------------------------------")

# nonlocal 声明改动局部变量
def func1():         # 第一层局部【地球】
    y = 10           # 局部变量【地球中的生物-人类 可以在地球的任意位置生存】
    def func2():     # 第二层局部【海洋】
        nonlocal y   # 申明改动局部变量
        y = 60       # 局部的局部变量【地球上的海洋中的生物-鱼】
        print(f"func2 中查看 y 的值是：{y}")    # y 的值是60
    func2()  # 调用内层函数
    print(f"func1 中查看 y 的值是：{y}")    # y 的值是60
func1()


"""  
总结：
global 声明改动全局变量
nonlocal 声明改动局部变量
变量创建的环境不一样，它的什么空间也不一样
"""
