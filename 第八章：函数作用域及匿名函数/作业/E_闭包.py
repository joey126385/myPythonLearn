"""

闭包：是一种现象

当两个函数嵌套的时候，外层函数返回内层函数的引用，这个叫做闭包
闭包在编程中有许多实际应用场景，其中包括封装、装饰器、定时器和事件处理、模块模式、循环中的异步操作和缓存等

"""

# 什么引用？
a = 10   # a 是 数字10 的引用

# 闭包
def func1():    # 外层函数
    def func2():    # 内层函数
        user_name = "不渝"    # 内层函数中的变量
        user_pass = 1024    # 内层函数中的变量
        return [user_name,user_pass]    # 内层函数的返回值
    return func2

# 闭包函数这样写的时候是怎么调用的？
f2 = func1()    # 调用外层函数，会得到内层函数，将内层函数存到变量f2中
x = f2()   # 相当于调用了外层函数的返回值，f2 相当于 内存函数的复制体
print(x)

# 闭包调用简写是不需要掌握的
y = func1()()
print(y)

# 以上这个案例可以体现，闭包的一个好处，闭包写法可以保护数据不受外部污染，
# 因为外部拿到的永远是闭包内存函数返回的值，而不能获取闭包中的源数据

# 用到的最多的是将闭包作为一个装饰器，装饰器会在 “魔法方法与装饰器” 这节课上讲解




# 今天先只认识闭包是什么样的，那它的具体使用情况，在讲面向对象的时候会去讲到闭包的使用，用来制作装饰器
# 装饰器，是在我们写好了一个程序之后，如果想要在不修改源码的情况下增加这个程序的功能，可以使用装饰器增加


