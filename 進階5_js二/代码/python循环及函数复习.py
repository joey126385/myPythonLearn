
"""
for 迭代变量 in 可迭代数据:
    被循环代码块

for循环是迭代循环

可迭代数据： 指的是像 列表、元组、字符串、集合、字典 这类型的拥有多个元素的数据。
range(初始值，终点值，步长) 用于生成一个可迭代数据的，可以用于生成一段可迭代等差数列

for 迭代变量 in range(初始值，终点值，步长):
    被循环代码块



while 条件:
    被循环代码块

while循环是条件循环


1*1=1    第一行只有1列
2*1=2 2*2=4    第二行只有2列
3*1=3 3*2=6 3*3=9    第三行只有3列    行号*[1~行号]  3*[1~3] ==> 3*1=3 3*2=6 3*3=9

行有多少列，是根据行数决定的

规律1：99乘法表每一行有多少个算式是根据行号决定的
规律2：每一行的算式，有一个不变的乘数、以及一个从1开始递增到行号的乘数

# 打印数 99 乘法表，要求不能使用 让print语句不换行的功能
i = 1
while i<10:
    j = 1
    st = ""
    while j<=i:      # 内层循环用于到到所有列
        st = st + f"{i}*{j}={i*j}" + "\t"
        j = j+1
    print(f"{st}")
    i = i+1   # 加上这行代码之后，咱们的循环变量就会递增，实现循环有出口 （循环如果没有出口的话，就循环了）
"""


"""
函数：
是一段具有特定功能的，被程序员封装好的代码块。

def 函数名(参数列表):
    被封装的函数代码
"""

def print_99():
    # 打印数 99 乘法表，要求不能使用 让print语句不换行的功能
    i = 1
    while i < 10:
        j = 1
        st = ""
        while j <= i:  # 内层循环用于到到所有列
            st = st + f"{i}*{j}={i * j}" + "\t"
            j = j + 1
        print(f"{st}")
        i = i + 1  # 加上这行代码之后，咱们的循环变量就会递增，实现循环有出口 （循环如果没有出口的话，就循环了）

# print_99()



user_msg = {'user_id' : 1, 'user_name' :"不渝", 'user_pass' : "1024"}
print(f"用户编号：{user_msg.get('user_id')}")
print(f"用户姓名：{user_msg['user_name']}")
print(f"用户密码：{user_msg.get('用户密码')}")
# print(f"用户密码：{user_msg['用户密码']}")