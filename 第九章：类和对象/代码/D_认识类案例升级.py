# 制作一个小的数据采集程序

# 思路：
# 0、基于认识类的案例
# 1、通过控制台录入学生信息
# 2、将录入的信息储存在对象
# 3、将对象储存在一个序列中，实现能够存储多个学生对象，并且可以存储每个学生对应的每个信息
# 4、由于只有以上步骤的话，该程序只能录入一个学员信息，这样写意义不大，为了加强功能，我们加个循环，实现可以批量录入
# 5、由于现实使用过程中，信息录入是有次数的，所以我们加一个是否结束录入的询问，如果客户确定结束就停止录入，并打印已经录入的学生信息


# 学生类 ( Students )
class Students():
    # 属性（类变量/成员变量）：学号（ID）、姓名（name）
    ID = None
    name = None

    # 行为（类方法/成员方法）：学习、睡觉
    def study(self,time):
        print(f"正在学习中，{time}分钟后下课")
    def sleep(self):
        print("进入梦乡。")

li = []     # 声明空列表保存学员对象数据
while True:
    # 1、通过控制台录入学生信息
    i = input("请输入学生编号：")
    n = input("请输入学生姓名：")
    # 测试
    print(i,n)
    # 2、将录入的信息储存在对象
    s = Students()      # 创建对象
    s.ID = i
    s.name = n
    # 3、将对象储存在一个序列中，实现能够存储多个学生对象，并且可以存储每个学生对应的每个信息
    li.append(s)    # 将刚刚的学员信息，追加到列表中
    print(li)
    # 5、由于现实使用过程中，信息录入是有次数的，所以我们加一个是否结束录入的询问，如果客户确定结束就停止录入，并打印已经录入的学生信息
    x = input("请问是否继续，继续扣1，其他结束：")
    if x != "1":
        break

# 打印已经录入的学生信息
print("当前系统已录入的学员信息：")
for i in li:
    # 由于列表中存的是对象，所以循环遍历得到的也是对象，那么查看对象的属性，是通过对象.属性名去查看
    print(i.ID,i.name)


# 课后练习：
# 1、按照老师上课的方式，去写一下课堂案例
# 2、（非必须完成）当然“认识类案例升级.py”文件中的代码，还可以优化，比如说类属性赋值，可以通过初始化方法优化，
#  比如说当前录入学员信息的时候，学员ID是手动输入的，但是其实手动输入的话可能会有重复的情况，这样不对，可以尝试调整一下，让学号是系统自动生成。


