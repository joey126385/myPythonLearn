"""
捕捉异常的语法：
try:
    可能会发生异常的代码
except [异常类 as 别名]:
    发生异常的解决方案
[else:
    没有异常发生时执行的代码]
[finally:
    不管用没有异常都会执行]

解析：
try 是告诉解释器，这后面的代码块是可能发生异常的代码块。
except 用于告诉解释器，这里是捕获异常的，已经捕获之后处理异常的。
else 当没有发生异常的情况下，执行的代码块
finally 不管用没有异常都会进入，并执行其中的代码。

"""

# 一、捕获指定异常
"""
# ValueError 当用户输入非数字的时候，出现值错误
try:
    x = int(input("请输入一个数字："))
    if x%2==0:
        print("这是一个偶数")
    else:
        print("这是一个奇数")
except ValueError:        # 指定捕获值错误
    print("你输入的是非数字，必须输入数字哦，请重启程序再进行尝试！")
"""

"""
# 解析有异常处理和没有异常处理的区别
# 假设以下这段代码在项目里面要重复使用10次
# 异常处理到底是加在哪？     ---> 异常处理一般情况下，举例有问题的代码越近越好，越精确越好
for i in range(10):
    try:
        x = int(input("请输入一个数字："))
        if x % 2 == 0:
            print("这是一个偶数")
        else:
            print("这是一个奇数")
    except ValueError as e:       # 捕捉到指定异常后，将异常信息保存到变量e中
        print(f"当前输入错误，错误提示：{e}")
"""

"""
异常处理的意义是，以最小的损失，暂时跳过报错部分，并不影响其他功能的运行。

异常处理爬虫中用到的也很多，比如说我们在做批量爬虫的时候，可能因为网络原因，或者网站平台问题，爬取出现异常，
为了尽可能减少损失，加上异常处理之后，也仅仅只是跳过这一段报错部分数据的爬取，其他数据爬取还是能够正常进行。
"""

# 二、捕捉所有异常
# 某些情况下，代码比较多，我不确定我要捕获什么异常，这个时候，可以使用捕获所有异常。

"""
# 实现输入两个数字，进行除法运算，在进行除法运算之前，求出被除数，是奇数还是偶数
x = int(input("请输入一个数字："))
y = int(input("请输入二个数字："))
if y%2  == 0:       # 判断是否是偶数
    print(f"{y}是一个偶数。{x}/{y}={x/y}")
else:
    print(f"{y}这是一个奇数。{x}/{y}={x/y}")
# ValueError  值错误
# ZeroDivisionError   输入的第二除数不能是0
"""

"""
try:
    x = int(input("请输入一个数字："))
    y = int(input("请输入二个数字："))
    if y % 2 == 0:  # 判断是否是偶数
        print(f"{y}是一个偶数。{x}/{y}={x / y}")
    else:
        print(f"{y}这是一个奇数。{x}/{y}={x / y}")
except Exception as e:         # 捕获所有异常，并获取具体的异常提示信息
    print(f"当前代码 异常:{e}")
"""


# 解答： range(初始值,终点值,步长)    初始值默认为0，步长默认为1


# 三、【可以省略】else 和 finally
try:
    print('a')
except Exception as e:
    print("哈哈哈哈，报错了吧~")
else:
    print("~如果代码没问题，就执行到我了~")
finally:
    print("-------------------------不管代码有没有问题，都要执行我")

"""
异常捕捉是我们程序在运行的过程中，在发生错误的时候，用尽可能小的代码，暂时跳过这个报错，不影响其他功能的使用，减少这个报错带来的影响。
语法：
try:
    可能会发生问题的代码块
except 指定报错类型:
    当捕捉到报错的情况下会执行的代码块
【else:
    当代码运行没有任何问题的时候会执行的代码块
finally:
    不管有没有报错都要执行的代码块】
"""