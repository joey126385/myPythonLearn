
"""
正则六部曲：
"""
import re   # 导入正则库

# 一、固定字符串查找【使用限制大】
str_A = "张三身高：178,体重：168,学号：123456,密码：1024"
# 练习: 匹配到学号 123456
msg = re.findall("123456",str_A)

# 二、元字符 :  用于匹配某一类字符
str_B = """[
{张三身高: 178, 体重: 168, 学号: 123-456, 密码: 1024},
{李四身高: 188, 体重: 138, 学号: 123-456, 密码: 2048}
]"""
# 【语法】 . 匹配除了 \n换行符 之外的其他任何内容
# 匹配 以学号开头，:其次，空格再其次，数字再其次这样格式的数据
msg = re.findall("学号:........",str_B)

# 【语法】 [] 匹配列举的字符,用于从源字符串中查询是否包含指定字符信息
# 【练习】假设，我们规定 身体密码 这些是敏感词，我们去判断一下 text2 中是否有敏感词
text2 = "今天天气真好，我的身体好热啊。"
msg = re.findall("[身体密码]",str_B)

# 【语法】 \d 匹配数字
# 【练习】拿到 密码数据
msg = re.findall("密码:.(\d\d\d\d)",str_B)

# 【语法】 \D 匹配非数字
msg = re.findall("密码:\D(\d\d\d\d)",str_B)


str_B = """[
{张三身高: 178, 体重: 168, 学号: 123-456, 密码: 1024},
{李四身高: 188, 体重: 138, 学号: 123-456, 密码: 2048}
]"""
# 【语法】 \s 匹配空白,即空格，table键
# 【练习】拿到 两个汉字开头,:其次,空格再其次,四个数字结尾 这样格式的数据
msg = re.findall("...\s\d\d\d\d",str_B)

# 【语法】 \S 匹配非空白
# 【练习】拿到 两个汉字开头,:其次,空格再其次,四个数字结尾 这样格式的数据
msg = re.findall("\S\S\S\s\d\d\d\d",str_B)

# 【语法】 \w 匹配单词字符: 数字、字母、汉字...(除了标点符号之外的单个字符)
# 【练习】拿到 两个汉字开头,:其次,空格再其次,四个数字结尾 这样格式的数据
msg = re.findall("\w\w\W\s\d\d\d\d",str_B)

# 【语法】 \W 匹配非单词符号: 标点符号
# 【练习】拿到 学号: 123-456 这样格式的数据
msg = re.findall("\w\w\W\s\d\d\d\W\d\d\d",str_B)



# 课后思考: 假设蔡徐坤是抖音敏感词，用input模拟用户输入一句话，我们可以用正则匹配是否包含敏感词。


# 三、数量元字符  ： 用于修饰单个元字符，用于表示重复某一类字符
str_C = '''[
{张三身高: 178, 体重: 16890, 学号: 123456, 密码: 1024},
{李四身高: 188, 体重: , 学号: 123-456, 密码: 1024}
]'''
# 【语法】 * 匹配0~无数次。最少可以一个数据都匹配不到，最多可以无数个。
# 【练习】匹配 体重: 后面的数字0~无数次
msg = re.findall("体重:\s\d*",str_C)

# 【语法】 + 匹配1~无数次。最少匹配一次，最多可以无数个。
# 【练习】匹配 体重: 后面的数字1~无数次
msg = re.findall("体重:\s\d+",str_C)

# 【语法】 ? 匹配0~1。最少匹配零次，最多匹配一次。
# 【练习】匹配 体重: 后面的数字0~1次
msg = re.findall("体重:\s\d?",str_C)


str_C = '''[
{张三身高: 178, 体重: 16890, 学号: 123456, 密码: 1024},
{李四身高: 188, 体重: , 学号: 123-456, 密码: 1024}
]'''
# 【语法】 {最少,}   最少匹配多少次
# 【练习】匹配 体重: 后面的数字最少0次
msg = re.findall("体重:\s\d{0,}",str_C)

# 【语法】 {次数}   限定匹配次数
# 【练习】拿到 两个汉字开头,:其次,空格再其次,四个数字结尾 这样格式的数据
msg = re.findall("\w\w\W\s\d{4}",str_C)

# 【语法】 {最少,最多} 限定匹配次数,限定最少匹配多少次,最多多少次
# 【练习】拿到 两个汉字开头,:其次,空格再其次,数字结尾(数字最少1，最多6) 这样格式的数据
msg = re.findall("\w\w\W\s\d{1,6}",str_C)

# 解答1：只要是表示最少多少次的，语法后面要跟逗号。
# 解答2：\d\d\d\d == \d{4}


# 四、组合使用
# 【组合练习1】以下为包含了电话号码的字符串，求取匹配座机号
str_D = '''[
            {姓名:张三, 电话: 18887654321, 幸运数:01234567891, 座机:0511-52152166}
            {姓名:李四, 电话: 18887654321, 幸运数:01234567891, 座机:0511-52152166}
        ]'''
# 1、分析：
# 匹配座机号 :  0511-52152166     \d \W
# 座机号正则匹配规则 :  \d{4}\W\d{8}
# 2、测试
msg = re.findall("\d{4}\W\d{8}",str_D)


"""
总结-正则的书写规则：
    1、确定要的数据是什么模式？
    2、这个模式需要那些元字符？
    3、根据这个数字出现次数,确定数量元字符？
    4、写正则匹配规则？
    5、用代码去验证？
"""



# 五、多种情况分组字符
str_E = '''[
            {姓名:张三, 电话: 18887654321, 幸运数:01234567891, 座机:0511-52152166}
            {姓名:李四, 电话: 18887654321, 幸运数:01234567891, 座机:0511-52152166}
        ]'''
# 【组合练习2】如果说需求升级，即想匹配电话号码，又想匹配座机
# 【语法】 |  是或者的意思 相当于 Python 中的 or
# 1、分析：
# 18887654321     写正则匹配规则 :  1\d{10}
# 0511-52152166   写正则匹配规则 :  \d{4}-\d{8}
# 2、测试：
msg = re.findall("1\d{10}|\d{4}-\d{8}",str_E)



# 六、限定位置
str_F = '姓名:张三, 电话: 18887654321, 幸运数:01234567891, 座机:0511-52152166'
# 【语法】 ^只匹配字符串开头
msg = re.findall("^张三",str_F)
print(msg)

# p_n = input("请输入你的电话号码")
# msg = re.findall("^1",p_n)
# print(msg)

# 【语法】 $只匹配字符串结尾
msg = re.findall("77$",str_F)
print(msg)

# p_q = input("请输入你的QQ邮箱")
# msg = re.findall("@qq.com$",p_q)
# print(msg)


"""
贪婪模式： 以上的正则案例几乎都是贪婪模式。贪婪模式是指尽可能多的匹配数据。
非贪婪模式：尽可能少的匹配数据。
"""


