# 序列类型的操作方法 ，通过序列类型变量.出来
"""
列表:
概念描述：列表是一列有序数据的组合。
表示形式：在Python中列表用[]表示，[]中可以放多个元素，元素之间用逗号隔开。列表中的每个元素可以是任意数据类型。
"""

"""新增方法:
 列表变量名.append(元素)    用于追加数据     元素--数字、小数、复数、布尔、列表、元组、字符串
 列表名.insert(下标,元素)  用于向指定下标插入数据     元素--数字、小数、复数、布尔、列表、元组、字符串    下标--索引
 列表名.extend(序列元素)  批量添加数据   序列元素---- 列表、元组、字符串     【先把序列里面所有元素提取出来，然后依次追加到列表末尾】
"""
"""
# 实战讲解:
# 实战须知：在 class01 班级中目前只有三位同学，为了更好的管理学员信息，学员信息储存在一个列表中。
class01 = [ "姓名:不渝,年龄:18" , "姓名:林里,年龄:19" , "姓名:林里,年龄:21" ]
# 列表解说:     元素下标:0              元素下标:1            元素下标:2

# 基础需求： class01班级新来了一位同学 "张三"，现在需要录入新学员信息到列表中进行储存。请用新学的知识点实现这个需求。
# 张三信息： "姓名：张三，年龄：20"
# 1、将张三的信息，追加到列表末尾
# x = class01.append("姓名：张三，年龄：20")
# # 查看追加后的数据
# print(x)     # None  ,由于列表是可变数据类型，所以说python提供的操作方法是直接取修改到列表的源数据的
# print(class01)
# 2、将张三信息，新增到列表指定位置
y = class01.insert(0,"姓名：张三，年龄：20")
print(y)    # None  ,由于列表是可变数据类型，新增是直接能够作用在列表上的，所以不需要返回值
print(class01)
# 需求升级： class01班级新来了三位同学，现在需要将这个三个学员全部录入到系统中。
# 学员信息： "姓名：李四，年龄：30"   "姓名：王五，年龄：40"     "姓名：宋六，年龄：50"
li = ["姓名：李四，年龄：30","姓名：王五，年龄：40","姓名：宋六，年龄：50"]
tu = ("姓名：李四，年龄：30","姓名：王五，年龄：40","姓名：宋六，年龄：50")
#           0                      1                  2
# 三个字符串成为了一个整体，并且，这三个字符串还能很快的获取到
class01.extend(li)   # extend 它会提取括号中序列类型的每个元素，然后依次追加到列表末尾
print(class01)
"""

# 总结：
# 1、序列类型操作方法的使用是通过，序列类型的变量名.方法名(参数) 这样取使用
# 2、python中，可变数据类型的所有操作方法都是作用于源数据的，所以一般没有返回值。




"""删除方法
1、pop(下标)     根据指定下标删除数据，并返回被删除的内容，当没有指定下标的时候，默认删除下标 -1 对应的值
2、remove(元素)   根据指定元素删除数据，元素----你想要删除的内容 
3、clear()    清空列表，删除列表中所有的数据    
4、del 列表名[初始值:终点值:步长]     切片删除
"""

"""
# 实战讲解:
del_li1 = ["老虎","狮子","牛马","小白鼠","大花蛇","白老虎"]
#            0     1      2      3       4       5
# 请挑选出其中最不一样的动物，然后进行删除，删除后在控制台打印新列表
a = del_li1.pop(2)       # 直接作用于 列表本身 的， 还是会给我返回一个删除好的数据
# 列表是可变数据类型，python有规定，可变数据类型的所有操作方法，都是可以作用于可变数据本身
print(del_li1)
print(a)

del_li2 = ["老虎","狮子","牛马","小白鼠","大花蛇","白老虎"]
# 我想删除以上列表中的 "小白鼠",但是我又不想用下标删除的方法？
del_li2.remove("小白鼠")
print(del_li2)

del_li3 = ["老虎","狮子","牛马","小白鼠","大花蛇","白老虎"]
# 我想清空li列表
del_li3.clear()
print(del_li3)

del_li4 = ["老虎","狮子","牛马","小白鼠","大花蛇","白老虎"]
#            0      1     2     3        4       5
#            0            2              4
# 要求删除  "老虎"    "牛马"    "大花蛇"
# del 列表名[初始值:终点值:步长]     切片删除，它比较特殊，我们得先测试，能够通过切片获取到数据
print(del_li4[0:5:2])
del del_li4[0:5:2]
print(del_li4)
# 切片取值和切片删除只能取到或者删除有一定规律的数据

"""



""" 修改
列表名[下标] = 值
"""

"""
upd_li = ["老虎","狮子","牛马","小白鼠","大花蛇","白老虎"]       # 重新给li赋值
#           0      1     2     3        4       5
# 要求将 li列表中下标为2 的这个位置的值进行 替换 ，替换成 "吗喽"
print(upd_li[2])
upd_li[2] = "吗喽"
print(upd_li)
"""





"""查询 --- 都有返回值
index(元素)  用于查询元素是否存在  元素---要查的内容   有返回值若查到数据，返回值是“被查元素第一次出现的下标”
count(元素)  用于统计元素出现次数  元素---要查的内容  有返回值(意味着要用变量存起来，或者直接打印使用方法的代码)
"""
# 只要是查询方法都会有返回值，如果没有的话，你咋知道有没有查到
# 实战讲解1:
cities = [
    "北京",
    "上海",
    "广州",
    "深圳",
    "杭州",
    "成都",
    "重庆",
    "武汉",
    "西安",
    "苏州"
]
# 现在系统中有一个存储用户城市的列表，请检测该列表中是否存在“深圳”和“湖南”这两个城市
q = cities.index("深圳")
print(q)
# w = cities.index("湖南")
# print(w)  # ValueError: '湖南' is not in list
# index 查询有个特定，查到就返回第一次出现的下标，没有查到就直接报错

# 实战讲解2:
names = [
    "张三",
    "李四",
    "王五",
    "赵六",
    "孙七",
    "周八",
    "吴九",
    "郑十",
    "张三",
    "张三"
]
# 现在系统中有一个存储用户姓名的列表，存在多个用户“张三”,请检测该用户出现的次数
n = names.count("张三")
print(n)