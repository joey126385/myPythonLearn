# 序列类型的操作方法 ，通过序列类型变量.出来
"""
字符串:
概念描述：元在Python中 用 ''  ""  """ """  ''' ''' 括起来的一段文件或者字符是字符串
表示形式：数据用引号包裹
"""

# 注意：字符串本质上是和元组一样只有查询方法的。
# 但是由于字符串在平时使用过程中频率很高，所以，python提供了一些特别的方法实现增删改查
#  ！！！！！ 不可变数据类型是不支持直接修改源数据

"""新增
+ 拼接实现新增
"""
ins_str1 = "不可变数据类型"
ins_str2 = "不支持直接修改源数据"
# 要求 拼接 ins_str1 和 ins_str2 为一个整体


"""删除
replace(旧元素,新元素)      将字符串中原本旧元素位置的值换成一个空字符串
# 注意：实现删除的方式，其实是利用到 字符串的修改方法，用空字符串替换指定元组实现。
"""
del_str = "不可变数据类型,是不支持直接修改源数据。"
# 要求删除 del_str 字符串中的 "是"


"""修改
replace(旧元素,新元素)   用新元素替换旧元素
upper()   无参数
lower()  无参数
split(切割符号)  以“指定切割符号”为间隔切割字符串变成列表
"""
upd_str1 = "我爱Python!Python!Python!Python!"
# 将字符串 upd_str1 中的 Python 替换成 "中国"

upd_str2 = "我爱Python!"
# 要求所有字母都变成大写

upd_str3 = "我爱Python!"
# 要求所有字母都变成小写

# 看起来不像修改的修改， 爬虫、处理文本数据用的多
zuobiao = "东149-西北11-东北132-西南168"
# 要求,根据 "-" 为分隔符号，提取字符串中数据为列表



'''查询
index(元素,开始下标)  指定从哪个位置开始查询
            -> 查询指定元素下标
            -> 如果查询到下标就返回
            -> index只查询一次，查到之后就不在进行
            
count(元素,下标)   统计指定元素在字符串中出现的次数, 统计好的数据会返回

find      查询是否包含指定字符串,如果包含，返回要查询元素的，第一个下标
isupper   查询是否全部是大写
islower   查询是否全部是小写
'''
sel_str1 = "东149,西北11,东北132,西南168"''
# 查 "1" 是否有出现，查到返回下标

sel_str2 = "东149,西北11,东北132,西南168"
# 统计 "北" 出现的次数

sel_str3 = "Hello, World!"
s = "World"
# 查询 sel_str3 中是否包含字符串 s

# input是输入语句，请让用户输入一段字符串，并检查是否全是大写
sel_str4 = input("请输入一段字符串：")

# input是输入语句，请让用户输入一段字符串，并检查是否全是小写
sel_str5 = input("请输入一段字符串：")